name: Packer Build and Artifact Integration

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib

      - name: Start PostgreSQL service
        run: |
          sudo service postgresql start
          sleep 5  # Wait for PostgreSQL to start

      - name: Set up test database
        run: |
          sudo -u postgres psql -c "CREATE USER testuser WITH PASSWORD 'testpassword';"
          sudo -u postgres psql -c "CREATE DATABASE webapp_db OWNER testuser;"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE webapp_db TO testuser;"

      - name: Run integration tests
        run: |
          pytest test_main.py
        env:
          DB_USERNAME: testuser
          DB_PASSWORD: testpassword
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: webapp_db
          AWS_REGION: us-east-1
          AWS_DEFAULT_REGION: us-east-1  

      - name: Build application artifact
        run: |
          mkdir -p build_output
          tar -czvf build_output/app_binary.tar.gz main.py requirements.txt
          if [ ! -f build_output/app_binary.tar.gz ]; then
            echo "Error: app_binary.tar.gz not found!"
            exit 1
          fi

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: '1.11.2'

      - name: Configure AWS Credentials (Dev Account)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Verify AWS Account in Workflow
        run: aws sts get-caller-identity

      - name: Initialize Packer
        run: |
          packer init webapp.pkr.hcl

      - name: Validate Packer template
        run: |
          packer validate webapp.pkr.hcl

      - name: Build Packer image
        id: build-image
        run: |
          packer build -machine-readable webapp.pkr.hcl | tee packer_output.log
          AMI_ID=$(grep 'artifact,0,id' packer_output.log | cut -d, -f6 | cut -d: -f2)
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
          echo "Extracted AMI ID: $AMI_ID"
          if [ -z "$AMI_ID" ]; then
              echo "Error: AMI ID not extracted properly."
              exit 1
          fi

      - name: Share AMI with DEMO account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Modify AMI launch permissions
        run: |
          echo "Adding launch permissions for AMI: ${{ steps.build-image.outputs.ami_id }}"
          aws ec2 modify-image-attribute \
            --image-id ${{ steps.build-image.outputs.ami_id }} \
            --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT_ID }}}]"
          echo "AMI launch permissions modified successfully." 

      - name: Upgrade OS Packages
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y

      - name: Install application dependencies
        run: |
          python -m pip install -r requirements.txt

      - name: Configure application auto-start
        run: |
          sudo cp webapp.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable webapp
      
      - name: Configure AWS for using launch template
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
            aws-region: us-east-1

      - name: Use existing launch template
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --source-version 1 \
            --launch-template-data '{"ImageId":"${{ steps.build-image.outputs.ami_id }}"}'

      - name: Start Auto-Scaling Group Instance Refresh
        id: instance-refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name my-auto-scaling-group \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
            --query 'InstanceRefreshId' --output text)
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name my-auto-scaling-group \
              --instance-refresh-ids ${{ steps.instance-refresh.outputs.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' --output text)
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              break
            elif [[ "$STATUS" == "Failed" ]]; then
              echo "Instance Refresh failed."
              exit 1
            else
              sleep 30
            fi
          done