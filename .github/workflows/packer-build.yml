name: Packer Build and Artifact Integration

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib

      - name: Start PostgreSQL service
        run: |
          sudo service postgresql start
          sleep 5  # Wait for PostgreSQL to start

      - name: Set up test database
        run: |
          sudo -u postgres psql -c "CREATE USER testuser WITH PASSWORD 'testpassword';"
          sudo -u postgres psql -c "CREATE DATABASE webapp_db OWNER testuser;"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE webapp_db TO testuser;"

      - name: Run integration tests
        run: |
          pytest test_main.py
        env:
          DB_USERNAME: testuser
          DB_PASSWORD: testpassword
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: webapp_db
          AWS_REGION: us-east-1
          AWS_DEFAULT_REGION: us-east-1  

      - name: Build application artifact
        run: |
          mkdir -p build_output
          tar -czvf build_output/app_binary.tar.gz main.py requirements.txt
          if [ ! -f build_output/app_binary.tar.gz ]; then
            echo "Error: app_binary.tar.gz not found!"
            exit 1
          fi

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: '1.11.2'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Initialize Packer
        run: |
          packer init webapp.pkr.hcl

      - name: Validate Packer template
        run: |
          packer validate webapp.pkr.hcl

      - name: Build Packer image
        id: build-image
        run: |
          packer build -machine-readable webapp.pkr.hcl | tee packer_output.log
          AMI_ID=$(grep 'artifact,0,id' packer_output.log | cut -d, -f6 | cut -d: -f2)
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      - name: Share AMI with DEMO account
        run: |
          aws ec2 modify-image-attribute 
          --image-id ${{ steps.build-image.outputs.ami_id }} 
          --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT_ID }}]}"